buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}-forge"
group = "${mod_base_package}.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: mappings_channel, version: minecraft_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // Default run configurations.
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment. The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            // Recommended logging level for the console: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            // This allows for optional authentication with Mojang servers
            // If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    // add sourceSets.main, "${mod_id}.refmap.json"
    debug.verbose = true
    debug.export = true
}

test {
    useJUnitPlatform()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.1'
}
// Taken from Mekanism: https://github.com/mekanism/Mekanism/blob/v10.1/build.gradle#L155-L180
def resource_targets = ["META-INF/mods.toml", "pack.mcmeta", "mcmod.info",  "${mod_id}.mixins.json"]
task replaceResources(type: Copy) {
    dependsOn(jar)
    outputs.upToDateWhen { false }
    def spec = copySpec {
        from(sourceSets.main.resources) {
            include resource_targets
            expand "project": project, "mod_id": mod_id, "mod_name": mod_name, "mod_version": mod_version,
                    "mod_authors": mod_authors, "mod_description": mod_description, "minecraft_version": minecraft_version,
                    "minecraft_version_range": minecraft_version_range, "forge_version_range": forge_version_range,
                    "loader_version_range": loader_version_range, "mod_credits" : mod_credits,
                    "resource_pack_desc": resource_pack_desc, "mod_issue_tracker": mod_issue_tracker,
                    "mod_license": mod_license, "mod_homepage": mod_homepage
        }
    }
    with spec
    into "$buildDir/resources/main/"
    // If IntelliJ's output dir exists, copy it there as well
    if (new File("$rootDir/out/production/${project.name}.main/").exists()) {
        copy {
            with spec
            into "$rootDir/out/production/${project.name}.main/"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.FAIL
    // Exclude the resource targets as we manually handle those and don't want them to invalidate our cache
    exclude resource_targets
    finalizedBy replaceResources
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task. This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
